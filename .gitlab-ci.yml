default:
  image: node:16.20.2-buster

stages:
  - build-test
  - test-image
  - test-preprod
  - sonarqube-check
  - build-docker
  - build-prod
  - pre_prod-dep
  - prod-dep

dockerbuild_main-job:
  stage: build-test
  before_script:
    - docker login $CI_REGISTRY -u ObadaS -p $GITLAB_PAT
  script:
    - docker build -t $IMAGE_NAME:${CI_COMMIT_SHORT_SHA} --no-cache --build-arg url=$CONNECTION_STRING .
    - docker push $IMAGE_NAME:${CI_COMMIT_SHORT_SHA}
  only:
    - main
  tags: [dockerfile]

test-eslint-and-jest_job:
  image: $IMAGE_NAME:${CI_COMMIT_SHORT_SHA}
  stage: test-image
  script:
    - npm install eslint jest
    - npx eslint modules/ routes/ models/
    - npm run test
  only:
    - main

locust-job:
  image: python:latest
  stage: test-preprod
  script:
    - pip3 install locust
    - locust --headless --users 100 --spawn-rate 20 -H https://morningnews.obadasoussachaddad.fr/ -t 1s --only-summary
  only:
    - pre-prod

sonarqube-check:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - main
dockerbuild_pre_prod-job:
  stage: build-docker
  before_script:
    - docker login $CI_REGISTRY -u ObadaS -p $GITLAB_PAT
  script:
    - docker build -t $IMAGE_NAME:pre-prod --no-cache --build-arg url=$CONNECTION_STRING .
    - docker push $IMAGE_NAME:pre-prod
  only:
    - pre-prod
  tags: [dockerfile]

dockerbuild_prod-job:
  stage: build-prod
  before_script:
    - docker login -u  $DOCKER_REGISTRY_USER  -p $DOCKER_PAT

  script:
    - docker build -t obadahaddad/morningnews:prod --no-cache --build-arg url=$CONNECTION_STRING .
    - docker push obadahaddad/morningnews:prod
  only:
    - prod
  tags: [dockerfile]

kubectl_pre_prod-job:
  stage: pre_prod-dep
  script:
    - echo $KUBECONFIG > kube-config.json
    - yq -p json -o yaml kube-config.json > kube-config.yaml
    - cat kube-config.json
    - cat kube-config.yaml
    - export KUBECONFIG=kube-config.yml
    - kubectl rollout restart deployment morningnews
  only:
    - pre-prod
  tags: [dockerfile]

kubectl_prod-job:
  image: alpine/k8s:1.26.13
  stage: prod-dep
  script:
    - kubectl rollout restart deployment morningnews
  only:
    - prod
